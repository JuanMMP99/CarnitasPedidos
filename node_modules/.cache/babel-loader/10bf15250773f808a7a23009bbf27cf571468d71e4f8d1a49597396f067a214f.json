{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/DELL/Documents/Archivos JuanManuel/Proyectos personales/CarnitasPedidos/carnitas-el-guero/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"onComplete\"];\nimport { GroupAnimationWithThen } from 'motion-dom';\nimport { removeItem } from 'motion-utils';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\nfunction isSequence(value) {\n  return Array.isArray(value) && value.some(Array.isArray);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\nfunction createScopedAnimate(scope) {\n  /**\n   * Implementation\n   */\n  function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n    let animations = [];\n    let animationOnComplete;\n    if (isSequence(subjectOrSequence)) {\n      animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n    } else {\n      // Extract top-level onComplete so it doesn't get applied per-value\n      const _ref = options || {},\n        {\n          onComplete\n        } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n      if (typeof onComplete === \"function\") {\n        animationOnComplete = onComplete;\n      }\n      animations = animateSubject(subjectOrSequence, optionsOrKeyframes, rest, scope);\n    }\n    const animation = new GroupAnimationWithThen(animations);\n    if (animationOnComplete) {\n      animation.finished.then(animationOnComplete);\n    }\n    if (scope) {\n      scope.animations.push(animation);\n      animation.finished.then(() => {\n        removeItem(scope.animations, animation);\n      });\n    }\n    return animation;\n  }\n  return scopedAnimate;\n}\nconst animate = createScopedAnimate();\nexport { animate, createScopedAnimate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}