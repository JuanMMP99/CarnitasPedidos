{"ast":null,"code":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(instance => {\n    if (instance) {\n      visualState.onMount && visualState.onMount(instance);\n    }\n    if (visualElement) {\n      if (instance) {\n        visualElement.mount(instance);\n      } else {\n        visualElement.unmount();\n      }\n    }\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Include externalRef in dependencies to ensure the callback updates\n   * when the ref changes, allowing proper ref forwarding.\n   */\n  [visualElement]);\n}\nexport { useMotionRef };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}