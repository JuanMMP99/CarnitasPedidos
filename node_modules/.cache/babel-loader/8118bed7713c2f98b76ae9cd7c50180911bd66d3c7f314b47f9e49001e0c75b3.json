{"ast":null,"code":"\"use client\";\n\nimport _objectSpread from \"C:/Users/DELL/Documents/Archivos JuanManuel/Proyectos personales/CarnitasPedidos/carnitas-el-guero/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nfunction useRender(Component, props, ref, _ref, isStatic) {\n  let {\n    latestValues\n  } = _ref;\n  let forwardMotionProps = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n  const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n  const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n  const elementProps = Component !== Fragment ? _objectSpread(_objectSpread(_objectSpread({}, filteredProps), visualProps), {}, {\n    ref\n  }) : {};\n  /**\n   * If component has been handed a motion value as its child,\n   * memoise its initial value and render that. Subsequent updates\n   * will be handled by the onChange handler\n   */\n  const {\n    children\n  } = props;\n  const renderedChildren = useMemo(() => isMotionValue(children) ? children.get() : children, [children]);\n  return createElement(Component, _objectSpread(_objectSpread({}, elementProps), {}, {\n    children: renderedChildren\n  }));\n}\nexport { useRender };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}